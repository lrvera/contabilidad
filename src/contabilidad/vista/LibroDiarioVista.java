package contabilidad.vista;

import static contabilidad.vista.ContaPrincipal.jDesktopPane1;
import contabilidad.vista.modelo.ModeloTablaLibroDiario;
import java.awt.Dimension;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.com.dao.UtilidadDAO;
import org.com.modelo.conta.AsientoContable;
import org.com.modelo.conta.LibroDiario;
import org.com.modelo.conta.Transaccion;

/**
 *
 * @author lrvera
 */
public class LibroDiarioVista extends javax.swing.JInternalFrame {

    ModeloTablaLibroDiario modeloTablaLibroDiario = new ModeloTablaLibroDiario();
    AsientoContable asientoContable;
    EntityManager em = null;
    private Date fecha = new Date();
    public static LibroDiario diario;
    private List<AsientoContable> asientosGenerados;
//    public LibroDiario diario1;

    /**
     * Creates new form LibroDiario
     */
    public LibroDiarioVista() {
        initComponents();
        this.btnModificar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAsientos = new javax.swing.JTable();
        btnCancelar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnCreraCerrarLibro = new javax.swing.JButton();
        btnMayor = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Libro Diario");
        setToolTipText("");
        setMinimumSize(new java.awt.Dimension(740, 480));

        tblAsientos.setModel(modeloTablaLibroDiario);
        cargarTabla();
        tblAsientos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tblAsientos);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar Asiento");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar Asiento");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar Asiento");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        String texto;
        if (!libroAbierto()) {
            texto = "Crear Nuevo Diario";
            btnAgregar.setEnabled(false);
            btnModificar.setEnabled(false);
            btnEliminar.setEnabled(false);

        } else {
            texto = "Cerrar Diario";
        }
        btnCreraCerrarLibro.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCreraCerrarLibro.setForeground(new java.awt.Color(51, 51, 255));
        btnCreraCerrarLibro.setText(texto);
        btnCreraCerrarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreraCerrarLibroActionPerformed(evt);
            }
        });

        btnMayor.setText("Generar Mayor");
        btnMayor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMayorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCreraCerrarLibro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMayor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnEliminar)
                    .addComponent(btnModificar)
                    .addComponent(btnAgregar)
                    .addComponent(btnCreraCerrarLibro)
                    .addComponent(btnMayor))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
//        diario = new LibroDiario();
        AsientoContable asiento = new AsientoContable();
        ModeloTablaLibroDiario modelo = (ModeloTablaLibroDiario) this.tblAsientos.getModel();
        AgregarEditarAsiento asientoVista = new AgregarEditarAsiento("Agregar Asiento Contable", asiento, modelo);
        ContaPrincipal.jDesktopPane1.add(asientoVista);
        asientoVista.toFront();
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension FrameSize = asientoVista.getSize();
        asientoVista.setLocation((desktopSize.width - FrameSize.width) / 2, (desktopSize.height - FrameSize.height) / 2);
        asientoVista.show();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnCreraCerrarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreraCerrarLibroActionPerformed
        if (btnCreraCerrarLibro.getText().equals("Crear Nuevo Diario")) {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("d' de 'MMMM' de 'yyyy");
            int op = JOptionPane.showConfirmDialog(this, "DESEA CREAR UN NUEVO LIBRO DIARIO", "CONFIRMAR", JOptionPane.WARNING_MESSAGE, JOptionPane.WARNING_MESSAGE);
            System.out.println(op);
            if (op == 0) {
                diario = new LibroDiario();
                crearCerrarLibro();
                this.dispose();
            }
        } else {
            int op = JOptionPane.showConfirmDialog(this, "DESEA CERRAR EL LIBRO, NO PODRA REALIZAR CAMBIOS", "CONFIRMAR", JOptionPane.WARNING_MESSAGE, JOptionPane.WARNING_MESSAGE);
            if (op == 0) {
                diario.setAbierto(Boolean.FALSE);
                crearCerrarLibro();
                this.dispose();
            }
        }
    }//GEN-LAST:event_btnCreraCerrarLibroActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        ModeloTablaLibroDiario modelo = (ModeloTablaLibroDiario) this.tblAsientos.getModel();
        AsientoContable asientoSeleccionado = modelo.getAsientoSeleccionado();
        AgregarEditarAsiento asientoVista = new AgregarEditarAsiento("Agregar Asiento Contable", asientoSeleccionado, modelo);
        ContaPrincipal.jDesktopPane1.add(asientoVista);
        asientoVista.toFront();
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension FrameSize = asientoVista.getSize();
        asientoVista.setLocation((desktopSize.width - FrameSize.width) / 2, (desktopSize.height - FrameSize.height) / 2);
        asientoVista.show();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        ModeloTablaLibroDiario mtld = (ModeloTablaLibroDiario) this.tblAsientos.getModel();
        AsientoContable asi = mtld.getAsientoSeleccionado();
        if (!asi.getTransacciones().isEmpty()) {
            int op = JOptionPane.showConfirmDialog(this, "Va a eliminar un asiento con transacciones, esta seguro de seguir?", "MENSAJE DE CONFIRMACION", WIDTH);
            if (op == 0) {
                eliminarAsiento(asi);
                mtld.fireTableDataChanged();
            }
        } else {
            eliminarAsiento(asi);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnMayorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMayorActionPerformed
        try {
            String ruta = "C:\\Users\\lrvera\\Documents\\NetBeansProjects\\Contabilidad\\src\\org\\com\\reportes\\MayorFinal.jrxml";
            JasperReport reporte = JasperCompileManager.compileReport(ruta);
//            Map<String, Object> parametros = new HashMap<String, Object>();
//            parametros.put("saldo", calcularSaldo());
//            JasperPrint mostrar = JasperFillManager.fillReport(reporte, parametros);
//            JasperViewer.viewReport(mostrar);
//            JasperReport reporte = (JasperReport) JRLoader.loadObjectFromFile("MayorFinal.jasper");
            Map<String, Object> parametros = new HashMap<String, Object>();
            parametros.put("saldo", calcularSaldo());
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, new JRBeanCollectionDataSource(asientosGenerados));
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new java.io.File("reporte3PDF.pdf"));
            exporter.exportReport();
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, "Error " + e.getMessage());
            System.out.println("error "+e.getMessage());
            System.out.println("localizado "+e.getLocalizedMessage());
            System.out.println("trace "+e.getStackTrace());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnMayorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCreraCerrarLibro;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnMayor;
    private javax.swing.JButton btnModificar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAsientos;
    // End of variables declaration//GEN-END:variables
    public void cargarTabla() {
        tblAsientos.setAutoCreateRowSorter(true);
        tblAsientos.getColumn("FECHA").setPreferredWidth(80);
        tblAsientos.getColumn("SECUENCIA").setPreferredWidth(100);
        tblAsientos.getColumn("DESCRIPCION").setPreferredWidth(468);
        tblAsientos.getColumn("TIPO").setPreferredWidth(50);
        ModeloTablaLibroDiario model = (ModeloTablaLibroDiario) this.tblAsientos.getModel();
        RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        tblAsientos.setRowSorter(sorter);
        try {
            em = UtilidadDAO.getEntityManager();
            Query q = em.createNamedQuery("AsientoContable.findAll");
            List<AsientoContable> asientos = q.getResultList();
            asientosGenerados = asientos;
            System.out.println("asientops generados " + asientosGenerados.size());
            for (int i = 0; i < asientos.size(); i++) {
                asientoContable = asientos.get(i);
                modeloTablaLibroDiario.addAsientoContable(asientoContable);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        tblAsientos.getRowSorter().toggleSortOrder(0);
    }

    public void eliminarAsiento(AsientoContable asiento) {
        try {
            em = UtilidadDAO.getEntityManager();
            em.getTransaction().begin();
            modeloTablaLibroDiario.deleteRow(tblAsientos.getSelectedRow());
            AsientoContable asient = em.getReference(AsientoContable.class, asiento.getId());
            em.remove(asient);
//                JOptionPane.showMessageDialog(this, "CUENTA ELIMINADA");
            em.getTransaction().commit();
            modeloTablaLibroDiario.fireTableDataChanged();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("mensaje--- " + e.getMessage());
            System.out.println("causa--- " + e.getCause());
            System.out.println("localizado--- " + e.getLocalizedMessage());
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public double calcularSaldo() {
        String busqueda = "SELECT t FROM Transaccion t ORDER BY cuenta";
        double saldo = 0;
        try {
            em = UtilidadDAO.getEntityManager();
            Query q = em.createQuery(busqueda);
            List<Transaccion> transaccions = q.getResultList();
            if (!transaccions.isEmpty()) {
                String cuentaAlmacenada = null;
                for (int i = 0; i < transaccions.size(); i++) {
                    String cuentaActual = transaccions.get(i).getCuenta().getDescripcionCuenta();
                    System.out.println("TRANSACCION " + cuentaActual);
//                    System.out.println("CUENTA ALMACENADA " + cuentaAlmacenada);
                    if (cuentaActual.equals(cuentaAlmacenada) || cuentaAlmacenada == null) {
                        saldo = saldo + transaccions.get(i).getDebe() - transaccions.get(i).getHaber();
                        cuentaAlmacenada = cuentaActual;
                        return saldo;
//                        System.out.println("saldo " + saldo);
                    } else if (!cuentaActual.equals(cuentaAlmacenada)) {
                        saldo = 0;
                        saldo = saldo + transaccions.get(i).getDebe() - transaccions.get(i).getHaber();
                        cuentaAlmacenada = cuentaActual;
                        return saldo;
//                        System.out.println("saldo " + saldo);
                    }
                }
            }
            JOptionPane.showMessageDialog(this, "NO ESISTEN REGISTROS");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return saldo;
    }

    public boolean libroAbierto() {
        boolean valido = false;
        String sql = "SELECT l FROM LibroDiario l";
        Query q = em.createQuery(sql);
        List<LibroDiario> libros = q.getResultList();
        System.out.println("libros " + libros.size());
        for (int i = 0; i < libros.size(); i++) {
            diario = libros.get(i);
            valido = diario.isAbierto();
            System.out.println("valido" + valido);
        }
        return valido;
    }

    /*public boolean verificarDiario() {
        String sql = "SELECT abierto FROM LibroDiario";
        Connection cn = Conexion.getConexion();
        boolean valido = false;
        try {
            Statement ps = cn.prepareStatement(sql);
            ps = cn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = ps.executeQuery(sql);
            if (rs != null && rs.last()) {
                valido = Boolean.valueOf((String) rs.getString(1));
                System.out.println("valido -- " + valido);
            } else {
                valido = Boolean.TRUE;
                System.out.println("valido -- " + valido);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return valido;
    }*/
    public void crearCerrarLibro() {
        try {
            em = UtilidadDAO.getEntityManager();
            em.getTransaction().begin();
            System.out.println("va av entra a crear");
            System.out.println("diario" + diario);
            if (diario.getId() == null || diario.getId() == 0) {
                System.out.println("entra a crear");
                diario = new LibroDiario();
                diario.setAbierto(Boolean.TRUE);
//                diario.setFecha(fecha);
                em.persist(diario);
                System.out.println("guarda diario " + diario);
            } else {
                em.merge(diario);
            }
            em.getTransaction().commit();
        } catch (Exception e) {
            if (em == null) {
                JOptionPane.showMessageDialog(this, "Error al guardar, imposible crear Unidad de persistencia");
            } else {
                JOptionPane.showMessageDialog(this, "Error en la transaccion guardar");
                if (em.getTransaction().isActive()) {
                    em.getTransaction().rollback();
                }
            }
            e.printStackTrace();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public LibroDiario getDiario() {
        return diario;
    }

    public void setDiario(LibroDiario diario) {
        this.diario = diario;
    }

}
